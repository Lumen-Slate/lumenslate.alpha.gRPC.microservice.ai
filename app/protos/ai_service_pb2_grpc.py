# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import warnings

from . import ai_service_pb2 as ai__service__pb2

GRPC_GENERATED_VERSION = '1.73.0'
GRPC_VERSION = grpc.__version__
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower
    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    raise RuntimeError(
        f'The grpc package installed is at version {GRPC_VERSION},'
        + f' but the generated code in ai_service_pb2_grpc.py depends on'
        + f' grpcio>={GRPC_GENERATED_VERSION}.'
        + f' Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}'
        + f' or downgrade your generated code using grpcio-tools<={GRPC_VERSION}.'
    )


class AIServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.GenerateContext = channel.unary_unary(
                '/ai_service.AIService/GenerateContext',
                request_serializer=ai__service__pb2.GenerateContextRequest.SerializeToString,
                response_deserializer=ai__service__pb2.GenerateContextResponse.FromString,
                _registered_method=True)
        self.DetectVariables = channel.unary_unary(
                '/ai_service.AIService/DetectVariables',
                request_serializer=ai__service__pb2.VariableDetectorRequest.SerializeToString,
                response_deserializer=ai__service__pb2.VariableDetectorResponse.FromString,
                _registered_method=True)
        self.SegmentQuestion = channel.unary_unary(
                '/ai_service.AIService/SegmentQuestion',
                request_serializer=ai__service__pb2.QuestionSegmentationRequest.SerializeToString,
                response_deserializer=ai__service__pb2.QuestionSegmentationResponse.FromString,
                _registered_method=True)
        self.GenerateMCQVariations = channel.unary_unary(
                '/ai_service.AIService/GenerateMCQVariations',
                request_serializer=ai__service__pb2.MCQRequest.SerializeToString,
                response_deserializer=ai__service__pb2.MCQVariation.FromString,
                _registered_method=True)
        self.GenerateMSQVariations = channel.unary_unary(
                '/ai_service.AIService/GenerateMSQVariations',
                request_serializer=ai__service__pb2.MSQRequest.SerializeToString,
                response_deserializer=ai__service__pb2.MSQVariation.FromString,
                _registered_method=True)
        self.FilterAndRandomize = channel.unary_unary(
                '/ai_service.AIService/FilterAndRandomize',
                request_serializer=ai__service__pb2.FilterAndRandomizerRequest.SerializeToString,
                response_deserializer=ai__service__pb2.FilterAndRandomizerResponse.FromString,
                _registered_method=True)
        self.Agent = channel.unary_unary(
                '/ai_service.AIService/Agent',
                request_serializer=ai__service__pb2.AgentRequest.SerializeToString,
                response_deserializer=ai__service__pb2.AgentResponse.FromString,
                _registered_method=True)


class AIServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def GenerateContext(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DetectVariables(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SegmentQuestion(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GenerateMCQVariations(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GenerateMSQVariations(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def FilterAndRandomize(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Agent(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_AIServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'GenerateContext': grpc.unary_unary_rpc_method_handler(
                    servicer.GenerateContext,
                    request_deserializer=ai__service__pb2.GenerateContextRequest.FromString,
                    response_serializer=ai__service__pb2.GenerateContextResponse.SerializeToString,
            ),
            'DetectVariables': grpc.unary_unary_rpc_method_handler(
                    servicer.DetectVariables,
                    request_deserializer=ai__service__pb2.VariableDetectorRequest.FromString,
                    response_serializer=ai__service__pb2.VariableDetectorResponse.SerializeToString,
            ),
            'SegmentQuestion': grpc.unary_unary_rpc_method_handler(
                    servicer.SegmentQuestion,
                    request_deserializer=ai__service__pb2.QuestionSegmentationRequest.FromString,
                    response_serializer=ai__service__pb2.QuestionSegmentationResponse.SerializeToString,
            ),
            'GenerateMCQVariations': grpc.unary_unary_rpc_method_handler(
                    servicer.GenerateMCQVariations,
                    request_deserializer=ai__service__pb2.MCQRequest.FromString,
                    response_serializer=ai__service__pb2.MCQVariation.SerializeToString,
            ),
            'GenerateMSQVariations': grpc.unary_unary_rpc_method_handler(
                    servicer.GenerateMSQVariations,
                    request_deserializer=ai__service__pb2.MSQRequest.FromString,
                    response_serializer=ai__service__pb2.MSQVariation.SerializeToString,
            ),
            'FilterAndRandomize': grpc.unary_unary_rpc_method_handler(
                    servicer.FilterAndRandomize,
                    request_deserializer=ai__service__pb2.FilterAndRandomizerRequest.FromString,
                    response_serializer=ai__service__pb2.FilterAndRandomizerResponse.SerializeToString,
            ),
            'Agent': grpc.unary_unary_rpc_method_handler(
                    servicer.Agent,
                    request_deserializer=ai__service__pb2.AgentRequest.FromString,
                    response_serializer=ai__service__pb2.AgentResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'ai_service.AIService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('ai_service.AIService', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class AIService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def GenerateContext(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/ai_service.AIService/GenerateContext',
            ai__service__pb2.GenerateContextRequest.SerializeToString,
            ai__service__pb2.GenerateContextResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def DetectVariables(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/ai_service.AIService/DetectVariables',
            ai__service__pb2.VariableDetectorRequest.SerializeToString,
            ai__service__pb2.VariableDetectorResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def SegmentQuestion(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/ai_service.AIService/SegmentQuestion',
            ai__service__pb2.QuestionSegmentationRequest.SerializeToString,
            ai__service__pb2.QuestionSegmentationResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GenerateMCQVariations(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/ai_service.AIService/GenerateMCQVariations',
            ai__service__pb2.MCQRequest.SerializeToString,
            ai__service__pb2.MCQVariation.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GenerateMSQVariations(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/ai_service.AIService/GenerateMSQVariations',
            ai__service__pb2.MSQRequest.SerializeToString,
            ai__service__pb2.MSQVariation.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def FilterAndRandomize(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/ai_service.AIService/FilterAndRandomize',
            ai__service__pb2.FilterAndRandomizerRequest.SerializeToString,
            ai__service__pb2.FilterAndRandomizerResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def Agent(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/ai_service.AIService/Agent',
            ai__service__pb2.AgentRequest.SerializeToString,
            ai__service__pb2.AgentResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
